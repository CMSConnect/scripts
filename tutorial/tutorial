#!/usr/bin/env python

import json
import urllib2
import argparse
import sys
import os
import shutil
import ConfigParser

try:
    import git
except ImportError:
    git = None

def get_tutorial_dir(tutorial):
    """
    Find first unused tutorial directory
    """
    trial_dir = os.path.join(".", tutorial)
    if not os.path.exists(trial_dir):
        return trial_dir
    postfix = 1
    while True:
       test_dir = "%s.%d" % (trial_dir, postfix)
       if not os.path.exists(test_dir):
           return test_dir
       postfix += 1

def get_tutorials():
    """
    Use github api to get a list of tutorials currently available
    """
    (branding, suppress) = connect_info()
    tutorials = {}
    if not suppress:
        # not suppressing OSG tutorials so we'll get it from github
        github_page = urllib2.urlopen("https://api.github.com/orgs/osgconnect/repos")
        repo_data = json.load(github_page)
        repos = [ (x['name'], x['description'], x['git_url']) for x in repo_data ]
        for repo in repos:
            if repo[0].startswith('tutorial-'):
                tutorials[repo[0]] = {'description': repo[1],
                                      'url' : repo[2]}
    if branding != 'osg' and branding is not None:
        if os.path.exists('/stash'):
            tutorial_path = '/stash/connectbook/tutorials'
        else:
            tutorial_path = '/usr/local/connectbook/tutorials'
        tutorial_path = os.path.join(tutorial_path, branding)
        for name in os.listdir(tutorial_path):
            print tutorial_path
            print name
            tut_location = os.path.join(tutorial_path, name)
            if not os.path.isdir(tut_location):
                continue
            info = open(os.path.join(tut_location, '.info'), 'r').read()
            tutorials[name] = {'description': info,
                               'url': "file://{0}".format(tut_location)}
        
    return tutorials

def connect_info():
    """
    Get connect details from connect script
    """

    config = ConfigParser.RawConfigParser()
    config.read('/etc/ciconnect/config.ini')
    branding = ''
    suppress = False
    if config.has_section('connect'):
        branding = config.get('connect', 'brand')
    if config.has_section('tutorial'):
        suppress = config.getboolean('tutorial', 'suppress_git')
    return (branding, suppress)

def main():
    """
    Run script and try to get and install correct tutorial files
    """

    parser = argparse.ArgumentParser(description='Install tutorial files.')
    parser.add_argument('--list', dest='list', action='store_true',
                        default=False, help='List available tutorials')
    parser.add_argument('--info', dest='info', 
                        default=None, nargs=1, help='Print info on specified tutorial')
    parser.add_argument('--install', dest='install', 
                        default=None, nargs=1, help='Install files for specified tutorial')
    txt = "should be either list, info, or tutorial name to list available tutorials," \
          "get info on a specified tutorial, or install the specified tutorial respectively"
    parser.add_argument('cmd', nargs='*', help=txt, default=None)
    args = parser.parse_args(sys.argv[1:])
    # list tutorials
    if (args.cmd != [] and args.cmd[0] == 'list') or args.list:
        tutorials = get_tutorials()
        sys.stdout.write("Currently available tutorials: \n")
        for tutorial in tutorials:
            description = tutorials[tutorial]['description']
            sys.stdout.write("%s - %s\n" % (tutorial, description))
        sys.exit(0)
    # provide info on a given tutorial
    elif (args.cmd != [] and args.cmd[0] == 'info') or args.info:
        tutorials = get_tutorials()
        if len(args.cmd) > 1:
            tutorial = args.cmd[1]
        else:
            tutorial = args.info[0]
        if tutorial not in tutorials:
            sys.stderr.write("Tutorial %s not found, available tutorials "
                             "are:\n" % tutorial)
            for key in tutorials:
                sys.stderr.write("%s\n" % key)
            sys.exit(1)
        else:
            sys.stdout.write("%s - %s\n" % (tutorial, 
                                            tutorials[tutorial]['description']))
            sys.exit(0)
    # install tutorial
    elif (args.cmd != []) or args.install:
        if args.cmd != []:
            tutorial = args.cmd[0] 
        elif args.install != []:
            tutorial = args.install[0]
        tutorials = get_tutorials()
        if tutorial not in tutorials:
            sys.stderr.write("Tutorial %s not found, available tutorials "
                             "are:\n" % tutorial)
            for key in tutorials:
                sys.stderr.write("%s\n" % key)
            sys.exit(1)
        tutorial_dir = get_tutorial_dir(tutorial)
        if os.path.exists(os.path.join(".", tutorial)):
            sys.stdout.write("Directory %s exists, putting tutorial files "\
                             "in %s\n" % (tutorial, tutorial_dir))
        if tutorials[tutorial]['url'].startswith('file'):
            path = tutorials[tutorial]['url'][6:]
            shutil.copytree(path, tutorial_dir)
        elif git:
            git.Repo.clone_from(tutorials[tutorial]['url'], tutorial_dir)
        else:
            os.system('git clone "%s" "%s"' %
                      (tutorials[tutorial]['url'], tutorial_dir))
        sys.stdout.write("Tutorial files installed in %s\n" % tutorial_dir)
    else:
        parser.print_help()
        sys.exit(1)
        
if __name__ == '__main__':
    main()
