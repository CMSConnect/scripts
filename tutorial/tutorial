#!/usr/bin/env python

import json
import urllib2
import argparse
import sys
import os
import shutil
import ConfigParser

try:
	import git
except ImportError:
	git = None

# We may augment this in runtime
ConfigFiles = ['/etc/ciconnect/config.ini']

class mutableobject(object): pass

def get_tutorial_dir(tutorial):
	"""
	Find first unused tutorial directory
	"""
	if not tutorial.startswith('tutorial-'):
		tutorial = 'tutorial-' + tutorial
	base_dir = os.path.join(".", tutorial)
	trial_dir = base_dir
	postfix = 0
	while os.path.exists(trial_dir):
		postfix += 1
		trial_dir = "%s.%d" % (base_dir, postfix)
	return base_dir, trial_dir

def get_tutorials(config):
	"""
	Use github api to get a list of tutorials currently available
	"""
	tutorials = {}

	for org in config.github_orgs:
		try:
			github_page = urllib2.urlopen("https://api.github.com/orgs/%s/repos" % org)
		except urllib2.HTTPError:
			continue
		repos = json.load(github_page)
		github_page.close()
		for repo in repos:
			if not repo['name'].startswith('tutorial-'):
				continue
			name = repo['name'].replace('tutorial-', '')
			burl = repo['branches_url'].replace('{/branch}', '')
			tutorials[name] = {'description': repo['description'],
			                   'url': repo['git_url'],
			                   'branches_url': burl,
			}

    # N.B. placement means that local has precedence
	for path in config.localpaths:
		path = os.path.join(path, config.branding)
		if not os.path.exists(path):
			continue
		for name in os.listdir(path):
			tut_location = os.path.join(path, name)
			if not os.path.isdir(tut_location):
				continue
			try:
				info = open(os.path.join(tut_location, '.info'), 'r').readline().strip()
			except IOError:
				info = '???'
			tutorials[name] = {'description': info,
							   'url': "file://{0}".format(tut_location)}

	return tutorials

def tutorial_branches(config, url):
	"""
	Use github api to get all branches of a tutorial repo
	"""

	try:
		jsontxt = urllib2.urlopen(url)
	except urllib2.HTTPError:
		return []
	branches = json.load(jsontxt)
	jsontxt.close()
	return [b['name'] for b in branches]

def connect_info():
	"""
	Get connect details from connect script
	"""

	config = ConfigParser.RawConfigParser()
	for fn in ConfigFiles:
		config.read(fn)
	simple = mutableobject()
	simple.branding = ''
	simple.github_orgs = ['ci-connect', 'osgconnect']
	simple.localpaths = []

	if config.has_section('connect'):
		setattr(simple, 'branding', config.get('connect', 'brand'))

	# lists
	for opt in ('localpaths', 'github_orgs'):
		if config.has_option('tutorial', opt):
			setattr(simple, opt, [x.strip() for x in config.get('tutorial', opt).split(',')])

	# strings
	for opt in ():
		if config.has_option('tutorial', opt):
			setattr(simple, opt, config.get('tutorial', opt))

	return simple

def main():
	"""
	Run script and try to get and install correct tutorial files
	"""

	# Augment ConfigFiles if we can
	base = os.path.dirname(sys.argv[0])
	if base.endswith('/bin'):
		base = os.path.dirname(base)
	ConfigFiles.append(os.path.join(base, 'ciconnect.ini'))
	ConfigFiles.append(os.path.join(base, 'etc', 'ciconnect.ini'))

	global git
	if git is None:
		dir = 'python%d.%d' % (sys.version_info.major, sys.version_info.minor)
		sys.path.insert(0, os.path.join(base, 'lib', dir))
		try:
			git = __import__('git')
		except ImportError:
			print 'no such luck'
			pass

	config = connect_info()

	parser = argparse.ArgumentParser(description='Install tutorial files.')
	parser.add_argument('--list', dest='list', action='store_true',
						default=False, help='List available tutorials')
	parser.add_argument('--info', dest='info', 
						default=None, nargs=1, help='Print info on specified tutorial')
	parser.add_argument('--install', dest='install', 
						default=None, nargs=1, help='Install files for specified tutorial')
	txt = "should be either list, info, or tutorial name to list available tutorials," \
		  "get info on a specified tutorial, or install the specified tutorial respectively"
	parser.add_argument('cmd', nargs='*', help=txt, default=None)
	args = parser.parse_args(sys.argv[1:])

	def listtutorials():
		longest = max([len(name) for name in tutorials])
		longest += 2
		for tutorial in sorted(tutorials.keys()):
			description = tutorials[tutorial]['description']
			dots = '.' * (longest - len(tutorial))
			sys.stdout.write("%s %s %s\n" % (tutorial, dots, description))
		sys.stdout.write('\n')
		sys.stdout.write('Enter "tutorial name-of-tutorial" to clone and try out a tutorial.\n')
		return 0

	# list tutorials
	if (args.cmd != [] and args.cmd[0] == 'list') or args.list:
		tutorials = get_tutorials(config)
		sys.stdout.write("Currently available tutorials: \n")
		listtutorials()

	# provide info on a given tutorial
	elif (args.cmd != [] and args.cmd[0] == 'info') or args.info:
		tutorials = get_tutorials(config)
		if len(args.cmd) > 1:
			tutorial = args.cmd[1]
		else:
			tutorial = args.info[0]
		if tutorial not in tutorials:
			sys.stderr.write("Tutorial %s not found, available tutorials "
							 "are:\n" % tutorial)
			listtutorials()
			return 1
		else:
			listtutorials()
			return 0

	# install tutorial
	elif (args.cmd != []) or args.install:
		if args.cmd != []:
			tutorial = args.cmd[0] 
		elif args.install != []:
			tutorial = args.install[0]
		tutorials = get_tutorials(config)
		if tutorial not in tutorials:
			sys.stderr.write("Tutorial %s not found, available tutorials "
							 "are:\n" % tutorial)
			listtutorials()
			return 1
		base_dir, tutorial_dir = get_tutorial_dir(tutorial)
		branches = tutorial_branches(config, tutorials[tutorial]['branches_url'])
		print branches
		branch = None
		if config.branding in branches:
			branch = config.branding
		if branch:
			sys.stdout.write('Installing %s (%s)...\n' % (tutorial, branch))
		else:
			sys.stdout.write('Installing %s (master)...\n' % tutorial)
		if os.path.exists(base_dir):
			sys.stdout.write("Directory %s exists! " % base_dir)
		if tutorials[tutorial]['url'].startswith('file'):
			path = tutorials[tutorial]['url'][6:]
			try:
				shutil.copytree(path, tutorial_dir)
			except shutil.Error:
				pass # ?!#
		elif git and branch:
			repo = git.Repo.clone_from(tutorials[tutorial]['url'], tutorial_dir, b=branch)
		elif git:
			repo = git.Repo.clone_from(tutorials[tutorial]['url'], tutorial_dir)
		elif branch:
			os.system('git clone -b "%s" "%s" "%s"' %
					  (branch, tutorials[tutorial]['url'], tutorial_dir))
		else:
			os.system('git clone "%s" "%s"' %
					  (tutorials[tutorial]['url'], tutorial_dir))
		sys.stdout.write("Tutorial files installed in %s.\n" % tutorial_dir)
	else:
		parser.print_help()
		return 1

if __name__ == '__main__':
	sys.exit(main())
