#!/usr/bin/env python

import json
import urllib2
import tarfile
import sys
import os
import shutil
import ConfigParser
import tempfile

# We may augment this in runtime
ConfigFiles = ['/etc/ciconnect/config.ini']


class MutableObject(object):
    pass


def get_repo(repo_url, location, branch="master"):
    """
    Given a github repo url, download the appropriate tarball and extract

    :param repo_url: url to github repository
    :param location: path to place repo contents in
    :param branch:   branch from repo to grab, defaults to "master"

    :return: path to extracted directory, returns None if an error occurs
    """
    tarball_url = "{0}/tarball/{1}".format(repo_url, branch)
    try:
        url_obj = urllib2.urlopen(tarball_url)
        temp_obj = tempfile.TemporaryFile()
        shutil.copyfileobj(url_obj, temp_obj)
        extract_path = extract_tarfile(temp_obj, location)
        return extract_path
    except urllib2.URLError:
        sys.stderr.write("Can't download files from github\n")
        return None


def extract_tarfile(file_object, location=None):
    """
    Extract a specified tarball to in a given directory

    :type file_object: file object
    :type location: str
    :param location: path where tarball should be extracted,
                    defaults to current directory
    :return: path to directory extracted from tarball
    """
    file_object.seek(0)  # need to go to beginning for tarfile
    tarball_obj = tarfile.open(fileobj=file_object)
    cur_dir = os.getcwd()
    if location is not None:
        (base_path, tutorial_dir) = os.path.split(location)
        os.chdir(base_path)
        extract_dir = os.path.join(base_path,
                                   tarball_obj.getmembers()[0].name)
    else:
        extract_dir = os.path.join(cur_dir,
                                   tarball_obj.getmembers()[0].name)
    for item in tarball_obj:
        tarball_obj.extract(item)
    if location is not None:
        os.rename(extract_dir, tutorial_dir)
        extract_dir = os.path.join(location)
    os.chdir(cur_dir)
    return extract_dir


def get_tutorial_dir(tutorial):
    """
    Find first unused tutorial directory
    """
    if not tutorial.startswith('tutorial-'):
        tutorial = 'tutorial-' + tutorial
    base_dir = os.path.join(".", tutorial)
    trial_dir = base_dir
    postfix = 0
    while os.path.exists(trial_dir):
        postfix += 1
        trial_dir = "%s.%d" % (base_dir, postfix)
    return base_dir, trial_dir


def get_tutorials(config):
    """
    Use github api to get a list of tutorials currently available
    """
    tutorials = {}

    for org in config.github_orgs:
        try:
            github_page = urllib2.urlopen("https://api.github.com/orgs/%s/repos" % org)
        except urllib2.HTTPError:
            continue
        repos = json.load(github_page)
        github_page.close()
        for repo in repos:
            if not repo['name'].startswith('tutorial-'):
                continue
            name = repo['name'].replace('tutorial-', '')
            burl = repo['branches_url'].replace('{/branch}', '')
            tutorials[name] = {'description': repo['description'],
                               'url': repo['url'],
                               'branches_url': burl}

            # N.B. placement means that local has precedence
    for path in config.localpaths:
        path = os.path.join(path, config.branding)
        if not os.path.exists(path):
            continue
        for name in os.listdir(path):
            tut_location = os.path.join(path, name)
            if not os.path.isdir(tut_location):
                continue
            try:
                info = open(os.path.join(tut_location, '.info'), 'r').readline().strip()
            except IOError:
                info = '???'
            tutorials[name] = {'description': info,
                               'url': "file://{0}".format(tut_location),
                               'branches_url': ""}  # need empty branches url for later

    return tutorials


def tutorial_branches(config, url):
    """
    Use github api to get all branches of a tutorial repo
    """
    if url.startswith('file://') or url == '':
        # no branches for file urls or missing urls
        return []
    try:
        jsontxt = urllib2.urlopen(url)
    except urllib2.HTTPError:
        return []
    branches = json.load(jsontxt)
    jsontxt.close()
    return [b['name'] for b in branches]


def connect_info():
    """
    Get connect details from connect script
    """

    config = ConfigParser.RawConfigParser()
    for fn in ConfigFiles:
        config.read(fn)
    simple = MutableObject()
    simple.branding = ''
    simple.github_orgs = ['ci-connect', 'osgconnect']
    simple.localpaths = []

    if config.has_section('connect'):
        setattr(simple, 'branding', config.get('connect', 'brand'))

    # lists
    for opt in ('localpaths', 'github_orgs'):
        if config.has_option('tutorial', opt):
            setattr(simple, opt, [x.strip() for x in config.get('tutorial', opt).split(',')])

    # strings
    for opt in ():
        if config.has_option('tutorial', opt):
            setattr(simple, opt, config.get('tutorial', opt))

    return simple


def main(args):
    """
    Run script and try to get and install correct tutorial files
    """

    # Augment ConfigFiles if we can
    base = os.path.dirname(sys.argv[0])
    if base.endswith('/bin'):
        base = os.path.dirname(base)
    ConfigFiles.append(os.path.join(base, 'ciconnect.ini'))
    ConfigFiles.append(os.path.join(base, 'etc', 'ciconnect.ini'))

    config = connect_info()

    def usage(fp=sys.stderr):
        p = os.path.basename(sys.argv[0])
        print >> fp, 'usage: %s list                 - show available tutorials' % p
        print >> fp, '       %s info <tutorial-name> - show details of a tutorial' % p
        print >> fp, '       %s <tutorial-name>      - set up a tutorial' % p
        return 2

    def listtutorials():
        longest = max([len(name) for name in tutorials])
        longest += 2
        for tutorial in sorted(tutorials.keys()):
            description = tutorials[tutorial]['description']
            dots = '.' * (longest - len(tutorial))
            sys.stdout.write("%s %s %s\n" % (tutorial, dots, description))
        sys.stdout.write('\n')
        sys.stdout.write('Enter "tutorial name-of-tutorial" to clone and try out a tutorial.\n')
        return 0

    if not args:
        usage(fp=sys.stdout)
        print
        args = ('list',)

    args = list(args)
    cmd = args.pop(0)

    if cmd == 'list':
        tutorials = get_tutorials(config)
        sys.stdout.write("Currently available tutorials: \n")
        listtutorials()
        return 0

    # provide info on a given tutorial
    if cmd == 'info':
        tutorials = get_tutorials(config)
        for t in args:
            if t not in tutorials:
                sys.stderr.write("Tutorial %s not found. Available tutorials are:\n" % t)
                listtutorials()
                return 10

        for t in args:
            print 'Tutorial %s:' % t
            print tutorials[t]['description']
        return 0

    # install tutorial
    else:
        tutorial = cmd
        tutorials = get_tutorials(config)
        if tutorial not in tutorials:
            sys.stderr.write("Tutorial %s not found. Available tutorials are:\n" % tutorial)
            listtutorials()
            return 20

        base_dir, tutorial_dir = get_tutorial_dir(tutorial)
        branches = tutorial_branches(config, tutorials[tutorial]['branches_url'])
        # print branches
        branch = None
        if config.branding in branches:
            branch = config.branding
        if branch:
            sys.stdout.write('Installing %s (%s)...\n' % (tutorial, branch))
        else:
            sys.stdout.write('Installing %s (master)...\n' % tutorial)
        if os.path.exists(base_dir):
            sys.stdout.write("Directory %s exists! " % base_dir)

        if tutorials[tutorial]['url'].startswith('file'):
            path = tutorials[tutorial]['url'][6:]
            try:
                shutil.copytree(path, tutorial_dir)
            except shutil.Error:
                sys.stderr.write("Can't write tutorial to {0}\n".format(tutorial_dir))
                sys.exit(1)
        elif branch:
            if get_repo(tutorials[tutorial]['url'],
                        tutorial_dir,
                        branch=branch) is None:
                return 1
        else:
            if get_repo(tutorials[tutorial]['url'], tutorial_dir) is None:
                return 1
        sys.stdout.write("Tutorial files installed in %s.\n" % tutorial_dir)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
